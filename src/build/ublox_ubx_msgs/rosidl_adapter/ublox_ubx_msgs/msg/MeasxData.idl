// generated from rosidl_adapter/resource/msg.idl.em
// with input from ublox_ubx_msgs/msg/MeasxData.msg
// generated code does not contain a copyright notice


module ublox_ubx_msgs {
  module msg {
    module MeasxData_Constants {
      @verbatim (language="comment", text=
        "Constants for Multipath Indicators" "\n"        "Not measured")
      const uint8 MPATH_NOT_MEASURED = 0;
      @verbatim (language="comment", text=
        "Low multipath")
      const uint8 MPATH_LOW = 1;
      @verbatim (language="comment", text=
        "Medium multipath")
      const uint8 MPATH_MEDIUM = 2;
      @verbatim (language="comment", text=
        "High multipath")
      const uint8 MPATH_HIGH = 3;
    };
    @verbatim (language="comment", text=
      "MeasxData - Satellite measurements data for UBX-RXM-MEASX (0x02 0x14)")
    struct MeasxData {
      @verbatim (language="comment", text=
        "Fields" "\n"
        "GNSS identifier")
      uint8 gnss_id;

      @verbatim (language="comment", text=
        "Satellite identifier")
      uint8 sv_id;

      @verbatim (language="comment", text=
        "dBHz - Carrier noise ratio")
      uint8 c_no;

      @verbatim (language="comment", text=
        "Multipath indicator (refer to constants)")
      uint8 mpath_indic;

      @verbatim (language="comment", text=
        "0.04 m/s - Doppler measurement in m/s")
      int32 doppler_ms;

      @verbatim (language="comment", text=
        "0.2 Hz - Doppler measurement in Hz")
      int32 doppler_hz;

      @verbatim (language="comment", text=
        "Whole value of the code phase measurement")
      uint16 whole_chips;

      @verbatim (language="comment", text=
        "Fractional value of the code phase measurement")
      uint16 frac_chips;

      @verbatim (language="comment", text=
        "2^-21 ms - Code phase in ms")
      uint32 code_phase;

      @verbatim (language="comment", text=
        "ms - Integer part of the code phase")
      uint8 int_code_phase;

      @verbatim (language="comment", text=
        "Pseudorange RMS error index")
      uint8 pseu_range_rms_err;
    };
  };
};
